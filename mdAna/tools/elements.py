# Written by Metison Wood <wubqmail(at)163.com> under DWYW license

# Standard Python libraries
# {{{
from __future__ import (absolute_import, print_function, division,
        unicode_literals)
import os, sys
import numpy as np
import pandas as pd
# }}}

def elements():
# {{{
    """A function return a simple periodic table.

    Returns
    -------
    results: pandas.DataFrame
        contain a element's periodic table.

    Note:
    -----
    Atomic radius data taken from:
        Wikipage of Atomic radius of elements
    As atomic radius are not uniquely determined, the priority in selecting the value for each element is as follows:
    Metals    : Metallic radius -> empirical -> van der Waals -> Calculated
    Non-metal : Covalent -> empirical -> van der Waals -> Calculated
    RareGas   : van der Waals -> empirical -> Calculated -> Covalent
    """
    indexs = ['radius', 'mass', 'mp', 'bp']
    symbols = [
        # {{{
            "H",  "He", "Li", "Be", "B",    # 1  - 5
            "C",  "N",  "O",  "F",  "Ne",   # 6  - 10
            "Na", "Mg", "Al", "Si", "P",    # 11 - 15
            "S", "Cl", "Ar", "K",  "Ca",    # 16 - 20
            "Sc", "Ti", "V",  "Cr", "Mn",   # 21 - 25
            "Fe", "Co", "Ni", "Cu", "Zn",   # 26 - 30
            "Ga", "Ge", "As", "Se", "Br",   # 31 - 35
            "Kr", "Rb", "Sr", "Y",  "Zr",   # 36 - 40
            "Nb", "Mo", "Tc", "Ru", "Rh",   # 41 - 45
            "Pd", "Ag", "Cd", "In", "Sn",   # 46 - 50
            "Sb", "Te", "I",  "Xe", "Cs",   # 51 - 55
            "Ba", "La", "Ce", "Pr", "Nd",   # 56 - 60
            "Pm", "Sm", "Eu", "Gd", "Tb",   # 61 - 65
            "Dy", "Ho", "Er", "Tm", "Yb",   # 66 - 70
            "Lu", "Hf", "Ta", "W",  "Re",   # 71 - 75
            "Os", "Ir", "Pt", "Au", "Hg",   # 76 - 80
            "Tl", "Pb", "Bi", "Po", "At",   # 81 - 85
            "Rn", "Fr", "Ra", "Ac", "Th",   # 86 - 90
            "Pa", "U",  "Np", "Pu", "Am",   # 91 - 95
            "Cm", "Bk", "Cf", "Es", "Fm",   # 95 - 100
            "Md", "No", "Lr", "Rf", "Db",   # 101- 105
            "Sg", "Bh", "Hs", "Mt", "Ds",   # 106- 110
            "Rg", "Cn"                      # 111- 112
        # }}}
            ]
    radius = [
# {{{
          0.380, 0.320, 1.520, 1.120, 0.820, # 1  - 5
          0.770, 0.750, 0.730, 0.710, 1.540, # 6  - 10
          1.860, 1.600, 1.430, 1.110, 1.060, # 11 - 15
          1.020, 0.990, 1.880, 2.270, 1.970, # 16 - 20
          1.620, 1.470, 1.340, 1.280, 1.270, # 21 - 25
          1.260, 1.250, 1.240, 1.280, 1.340, # 26 - 30
          1.350, 1.220, 1.190, 1.160, 1.140, # 31 - 35
          2.020, 2.480, 2.150, 1.800, 1.600, # 36 - 40
          1.460, 1.390, 1.360, 1.340, 1.340, # 41 - 45
          1.370, 1.440, 1.510, 1.670, 1.450, # 46 - 50
          1.450, 1.400, 1.330, 2.160, 2.650, # 51 - 55
          2.220, 1.870, 1.818, 1.824, 1.814, # 56 - 60
          1.834, 1.804, 1.804, 1.804, 1.773, # 61 - 65
          1.781, 1.762, 1.761, 1.759, 1.760, # 66 - 70
          1.738, 1.590, 1.460, 1.390, 1.370, # 71 - 75
          1.350, 1.355, 1.385, 1.440, 1.510, # 76 - 80
          1.700, 1.800, 0.160, 1.900, 2.020, # 81 - 85
          2.200, 3.480, 2.150, 1.950, 1.790, # 86 - 90
          1.630, 1.560, 1.550, 1.590, 1.730, # 91 - 95
          1.740, 1.700, 1.860, 1.860, 1.111, # 95 - 100
          1.111, 1.111, 1.111, 1.310, 1.260, # 101- 105
          1.210, 1.190, 1.180, 1.130, 1.120, # 106- 110
          1.180, 1.300                       # 111- 112
# }}}
            ]
    mass = [
# {{{
         1.00797, 4.0026, 6.939, 9.012182, 10.811,           # 1  - 5
         12.01115, 14.0067, 15.9994, 18.9984032, 20.17976,   # 6  - 10
         22.989769, 24.30506, 26.9815386, 28.086, 30.973762, # 11 - 15
         32.064, 35.453, 39.948, 39.0983, 40.078,            # 16 - 20
         44.955912, 47.867, 50.9415, 51.9961, 54.938045,     # 21 - 25
         55.845, 58.933195, 58.6934, 63.546, 65.38,          # 26 - 30
         69.723, 72.63, 74.9216, 78.96, 79.904,              # 31 - 35
         83.798, 85.4678, 87.62, 88.90585, 91.224,           # 36 - 40
         92.90638, 95.96, 98.9062, 101.07, 102.9055,         # 41 - 45
         106.42, 107.8682, 112.411, 114.818, 118.71,         # 46 - 50
         121.76, 127.6, 126.90447, 131.293, 132.9054519,     # 51 - 55
         137.327, 138.90547, 140.116, 140.90765, 144.242,    # 56 - 60
         147., 150.36, 151.964, 157.25, 158.92535,           # 61 - 65
         162.5, 164.93032, 167.259, 168.93421, 173.054,      # 66 - 70
         174.9668, 178.49, 180.94788, 183.84, 186.207,       # 71 - 75
         190.23, 192.217, 195.084, 196.966569, 200.59,       # 76 - 80
         204.383, 207.2, 208.9804, 209., 210.,               # 81 - 85
         222., 223., 226.025, 227.028, 232.03806,            # 86 - 90
         231.03588, 238.02891, 237.048, 244., 243.,          # 91 - 95
         247., 247., 251., 252., 257.,                       # 95 - 100
         258., 259., 260., 261.11, 262.11,                   # 101- 105
         263.12, 262.12, 265., 266., 269.,                   # 106- 110
         272., 285.                                          # 111- 112
# }}}
            ]
    mp = [
    # {{{
        13.99, 0.95, 453.69, 1560, 2349,          # 1  - 5
        3800, 63.05, 54.8, 53.53, 24.56,          # 6  - 10
        370.87, 923, 933.47, 1687, 317.3,         # 11 - 15
        388.36, 171.6, 83.80, 336.53, 1115,       # 16 - 20
        1814, 1941, 2183, 2180, 1519,             # 21 - 25
        1811, 1768, 1728, 1357.77, 692.68,        # 26 - 30
        302.91, 1211.4, 1090, 494, 265.8,         # 31 - 35
        115.79, 312.46, 1050, 1799, 2128,         # 36 - 40
        2750, 2896, 2430, 2607, 2237,             # 41 - 45
        1828.05, 1234.93, 594.22, 429.75, 505.08, # 46 - 50
        903.78, 722.66, 386.85, 161.4, 301.59,    # 51 - 55
        1000, 1193, 1068, 1208, 1297,             # 56 - 60
        1373, 1345, 1099, 1585, 1629,             # 61 - 65
        1680, 1734, 1770, 1818, 1469,             # 66 - 70
        1925, 2506, 3290, 3695, 3459,             # 71 - 75
        3306, 2739, 2041.4, 1337.33, 234.32,      # 76 - 80
        577, 600.61, 544.4, 527, 575,             # 81 - 85
        202, 300, 973, 1323, 2115,                # 86 - 90
        1841, 1405.3, 910, 912.5, 1449,           # 91 - 95
        1613, 1259, 1173, 1133, 1800,             # 95 - 100
        1100, 1100, 1900, 2400, 9999,             # 101- 105
        9999, 9999, 9999, 9999, 9999,             # 106- 110
        9999, 9999                                # 111- 112
    # }}}
            ]
    bp = [
    # {{{
        20.268, 4.22, 1615, 2742, 4200,           # 1  - 5   
        4300, 77.36, 90.2, 85.03, 27.07,          # 6  - 10
        1156, 1363, 2792, 3173, 550,              # 11 - 15
        717.87, 239.11, 87.3, 1032, 1757,         # 16 - 20
        3103, 3560, 3680, 2943, 2234,             # 21 - 25
        3134, 3200, 3186, 3200, 1180,             # 26 - 30
        2477, 3093, 887, 958, 332,                # 31 - 35
        119.93, 961, 1655, 3609, 4682,            # 36 - 40
        5017, 4912, 4538, 4423, 3968,             # 41 - 45
        3236, 2435, 1040, 2345, 2875,             # 46 - 50
        1860, 1261, 457.4, 165.1, 944,            # 51 - 55
        2143, 3743, 3633, 3563, 3373,             # 56 - 60
        3273, 2076, 1800, 3523, 3503,             # 61 - 65
        2840, 2993, 3141, 2223, 1097,             # 66 - 70
        3675, 4876, 5731, 5828, 5869,             # 71 - 75
        5285, 4701, 4098, 3129, 629.88,           # 76 - 80
        1746, 2022, 1837, 1235, 610,              # 81 - 85
        211.3, 950, 2010, 3753, 5093,             # 86 - 90
        4300, 4200, 4273, 3503, 2880,             # 91 - 95
        3383, 2900, 1743, 1269, 9999,             # 95 - 100
        9999, 9999, 9999, 5800, 9999,             # 101- 105
        9999, 9999, 9999, 9999, 9999,             # 106- 110
        9999, 9999                                # 111- 112
    # }}}
            ]
    datas = np.array([radius, mass, mp, bp])
    results = pd.DataFrame(data=datas, index=indexs, columns=symbols)
    return results
# }}}
if __name__ == "__main__":
    a = elements()
    print(a['Ag'])
